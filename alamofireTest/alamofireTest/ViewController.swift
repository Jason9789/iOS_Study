//
//  ViewController.swift
//  alamofireTest
//
//  Created by Ï†ÑÌåêÍ∑º on 2021/01/26.
//

import UIKit
import Alamofire

class ViewController: UIViewController {
    
    @IBOutlet weak var progressLabel: UILabel!
    @IBOutlet weak var progressView: UIProgressView!
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        getTest()
        postTest()
        downTest()
    }

    
    func getTest() {
        let url = "https://jsonplaceholder.typicode.com/todos/1"
        AF.request(url,
                   method: .get,
                   parameters: nil,
                   encoding: URLEncoding.default,
                   headers: ["Content-Type": "application/json", "Accept" : "application.json"])
            .validate(statusCode: 200..<300)
            .responseJSON { (json) in
                // Ïó¨Í∏∞ÏÑú Í∞ÄÏ†∏Ïò® Îç∞Ïù¥ÌÑ∞Î•º ÏûêÏú†Î°≠Í≤å ÌôúÏö©.
                print(json)
            }
    }
    
    func postTest() {
        let url = "https://ptsv2.com/t/p53at-1611638708/post"
        var request = URLRequest(url: URL(string:url)!)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.timeoutInterval = 10
        
        // POSTÎ°ú Î≥¥ÎÇº Ï†ïÎ≥¥
        let params = ["id" : "abcd", "pw" : "123456!!!!"] as Dictionary
        
        // httpBodyÏóê paramerters Ï∂îÍ∞Ä
        do {
            try request.httpBody = JSONSerialization.data(withJSONObject: params, options: [])
        } catch {
            print("http Body Error")
        }
        
        AF.request(request).responseString { (response) in
            switch response.result {
            case .success:
                print("POST ÏÑ±Í≥µ")
            case .failure(let error):
                print("üö´ Alamofire Request Error\nCode:\(error._code), Message: \(error.errorDescription!)")
            }
        }
    }
    
    func downTest() {
        // ÌÖåÏä§Ìä∏ ÏÇ¨Ïù¥Ìä∏ÏóêÏÑú Î≥µÏÇ¨Ìïú Îã§Ïö¥Î°úÎìú Ï£ºÏÜå
        let url = "http://212.183.159.230/5MB.zip"
        
        // ÌååÏùº Îß§ÎãàÏ†Ä
        let fileManager = FileManager.default
        
        // Ïï± Í≤ΩÎ°ú
        let appURL = fileManager.urls(for: .documentDirectory, in: .userDomainMask)[0]
        
        // ÌååÏùº Ïù¥Î¶Ñ urlÏùò Îß® Îí§ Ïª¥Ìè¨ÎÑåÌä∏Î°ú ÏßÄÏ†ï (50MB.zip)
        let fileName: String = URL(string: url)!.lastPathComponent
        
        // ÌååÏùº Í≤ΩÎ°ú ÏÉùÏÑ±
        let fileURL = appURL.appendingPathComponent(fileName)
        
        // ÌååÏùº Í≤ΩÎ°ú ÏßÄÏ†ï Î∞è Îã§Ïö¥Î°úÎìú ÏòµÏÖò ÏÑ§Ï†ï (Ïù¥Ï†Ñ ÌååÏùº ÏÇ≠Ï†ú, ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±)
        let destination: DownloadRequest.Destination = { _, _ in
            return (fileURL, [.removePreviousFile, .createIntermediateDirectories])
        }
        
        // Îã§Ïö¥Î°úÎìú ÏãúÏûë
        AF.download(url, method: .get, parameters: nil, encoding: JSONEncoding.default, to: destination).downloadProgress { (progress) in
            self.progressView.progress = Float(progress.fractionCompleted)
            self.progressLabel.text = "\(Int(progress.fractionCompleted * 100))%"
        }.response { response in
            if response.error != nil {
                print("ÌååÏùº Îã§Ïö¥Î°úÎìú Ïã§Ìå®")
            } else {
                print("ÌååÏùº Îã§Ïö¥Î°úÎìú ÏôÑÎ£å")
            }
        }
    }

}

